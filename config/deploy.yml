# Name of your application. Used to uniquely configure containers.
service: exchange_rate_provider

# Name of the container image.
image: your-user/exchange_rate_provider

# Define servers where the application will be deployed.
servers:
  web:
    - 192.168.0.1

# Proxy settings (SSL, for example) - can be configured for your deployment setup.
proxy:
  ssl: true
  host: app.example.com

# Credentials for your image host (e.g., Docker Hub or another registry).
registry:
  username: your-user
  password:
    - YOUR_REGISTRY_PASSWORD

# Inject environment variables into containers
env:
  secret:
    - RAILS_MASTER_KEY
  clear:
    SOLID_QUEUE_IN_PUMA: true
    WEB_CONCURRENCY: 2

# Aliases for convenience when managing the app
aliases:
  console: docker exec -it exchange_rate_provider bash -c "bin/rails console"
  shell: docker exec -it exchange_rate_provider bash
  logs: docker logs -f exchange_rate_provider
  dbc: docker exec -it exchange_rate_provider bash -c "bin/rails dbconsole"

# Volumes configuration (for persistent storage, e.g., database or Active Storage files)
volumes:
  - "exchange_rate_provider_storage:/rails/storage"

# Assets path for bridging fingerprinted assets (e.g., JS and CSS files)
asset_path: /rails/public/assets

# Configure the image builder (if using a remote builder for Docker images)
builder:
  arch: amd64

# Optional: Use ssh for remote deployment (if you want to customize the ssh user)
ssh:
  user: app

# Optional: Configure services like Redis, MySQL, etc. You can include these if you're using additional services.
# For instance, if you want to use a MySQL database or Redis in your Docker setup, add them like so:
# accessories:
#   db:
#     image: mysql:8.0
#     host: 192.168.0.2
#     port: "3306"
#     env:
#       secret:
#         - MYSQL_ROOT_PASSWORD
#     directories:
#       - data:/var/lib/mysql
#   redis:
#     image: redis:7.0
#     host: 192.168.0.2
#     port: 6379
#     directories:
#
